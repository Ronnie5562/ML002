
.       - Any Character Except New Line
\d      - Digit (0-9)
\D      - Not a Digit (0-9)
\w      - Word Character (a-z, A-Z, 0-9, _)
\W      - Not a Word Character
\s      - Whitespace (space, tab, newline)
\S      - Not Whitespace (space, tab, newline)

\b      - Word Boundary
\B      - Not a Word Boundary
^[caret]       - Beginning of a String
$[dollar]      - End of a String

Here is a mnemonic to remember caret[^] and dollar[$]  -- carrot cost dollars - This would remind us that the caret comes first and the dollar sign comes last.

[]      - Matches Characters in brackets
[^ ]    - Matches Characters NOT in brackets
|       - Either Or - { Alternation }
( )     - Group

Quantifiers:
*       - 0 or More - { Repetition }
+       - 1 or More - { Repetition }
?       - 0 or One - To make something optional.
>->->-> NOTE: The question mark makes the preceding token in the regular expression optional. colou?r matches colour or color. {i.e The 'u' is optional} 
{3}     - Exact Number
{3,4}   - Range of Numbers (Minimum, Maximum)
n+	    - Matches any string that contains at least one n
n*	    - Matches any string that contains zero or more occurrences of n
n?	    - Matches any string that contains zero or one occurrences of n
n{X}	- Matches any string that contains a sequence of X n's
n{X,Y}	- Matches any string that contains a sequence of X to Y n's
n{X,}	- Matches any string that contains a sequence of at least X n's
n$	    - Matches any string with n at the end of it
^n	    - Matches any string with n at the beginning of it
?=n	    - Matches any string that is followed by a specific string n
?!n	    - Matches any string that is not followed by a specific string n


#### Sample Regexs ####

[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+


'''re.DOTALL is a flag in Python's re module that changes the behavior of the dot(.) metacharacter. Normally, the dot matches any character except a newline. However, when re.DOTALL is used, the dot will also match newline characters.

Here's an example to demonstrate how re.DOTALL works:
import re

text = "Hello\nworld"
pattern = r".*"
match = re.search(pattern, text)

print(match.group())  # Output: "Hello"

In the above code, the regular expression .* matches all characters in the input string up to the first newline character. Therefore, the matched string is "Hello". If we want the dot to match newline characters as well, we can use re.DOTALL as follows:
import re

text = "Hello\nworld"
pattern = r".*"
match = re.search(pattern, text, flags=re.DOTALL)

print(match.group())  # Output: "Hello\nworld"
In this example, we pass the re.DOTALL flag to re.search() function, which causes the dot to match newline characters as well. Therefore, the matched string is "Hello\nworld".
'''